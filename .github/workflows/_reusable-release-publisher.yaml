# Reusable Release Publisher Workflow
#
# This reusable workflow handles the publication of Python packages to PyPI
# and GitHub releases. It supports both production releases and pre-releases
# with configurable options.
#
# Features:
# - PyPI package publishing
# - GitHub release creation
# - Pre-release support
# - Release notes generation
# - Artifact management
#
# Publication Process:
# 1. Downloads build artifacts
# 2. Publishes package to PyPI
# 3. Creates GitHub release
# 4. Attaches artifacts to release
#
# Example Usage:
#   jobs:
#     publish:
#       uses: ./.github/workflows/_reusable-release-publisher.yaml
#       with:
#         version: "v1.0.0"
#         artifact-name: "dist-123456789"
#         is-prerelease: false
#       secrets:
#         pypi-token: ${{ secrets.PYPI_TOKEN }}
#
# Note: Requires PyPI token for package publishing

name: Reusable Release Publisher

on:
  workflow_call:
    inputs:
      version:
        description: "Version to release"
        required: true
        type: string
      artifact-name:
        description: "Name of the artifact to publish"
        required: true
        type: string
      is-prerelease:
        description: "Whether this is a pre-release"
        type: boolean
        default: false
    secrets:
      pypi-token:
        required: true
        description: "PyPI token for package publishing"
      test-pypi-token:
        required: false
        description: "Test PyPI token for pre-releases"

jobs:
  publish:
    runs-on: ubuntu-latest
    environment: ${{ inputs.is-prerelease && 'staging' || 'production' }}
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: ${{ inputs.artifact-name }}
          path: dist
      - name: Publish to PyPI
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ inputs.is-prerelease && secrets.test-pypi-token || secrets.pypi-token }}
          TWINE_REPOSITORY_URL: ${{ inputs.is-prerelease && 'https://test.pypi.org/legacy/' || '' }}
        run: |
          pip install --upgrade pip twine
          twine upload dist/*
      - uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ inputs.version }}
          name: Release ${{ inputs.version }}
          draft: false
          prerelease: ${{ inputs.is-prerelease }}
          files: dist/*
          generate_release_notes: true
