name: RC Release Process

on:
  workflow_call:
    inputs:
      version:
        required: true
        type: string
      artifact-name:
        required: true
        type: string
    secrets:
      test-pypi-token:
        required: true

jobs:
  technical-review:
    environment:
      name: technical-review
      url: ${{ steps.review-url.outputs.url }}
    runs-on: ubuntu-latest
    steps:
      - name: Generate review URL
        id: review-url
        run: |
          echo "url=$GITHUB_SERVER_URL/$GITHUB_REPOSITORY/actions/runs/$GITHUB_RUN_ID" >> $GITHUB_OUTPUT

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: ${{ inputs.artifact-name }}
          path: dist

      - name: Technical review checklist
        run: |
          echo "Technical Review Results:"
          echo "- Version: ${{ inputs.version }}"
          echo "- Artifacts: $(ls dist/)"

  qa-validation:
    needs: [technical-review]
    environment:
      name: qa-validation
      url: ${{ steps.qa-url.outputs.url }}
    runs-on: ubuntu-latest
    outputs:
      validation-status: ${{ steps.validate.outputs.status }}
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: ${{ inputs.artifact-name }}
          path: dist

      - name: Deploy to Test PyPI
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.test-pypi-token }}
          TWINE_REPOSITORY_URL: https://test.pypi.org/legacy/
        run: |
          pip install --upgrade pip twine
          twine upload dist/*

      - name: Validate deployment
        id: validate
        run: |
          # Extract package name from the wheel file
          WHEEL_FILE=$(ls dist/*.whl | head -n 1)
          PACKAGE_NAME=$(basename $WHEEL_FILE | cut -d'-' -f1)

          # Wait a bit for Test PyPI to process the upload
          sleep 30

          # Create a test environment
          python -m venv test-env
          source test-env/bin/activate

          # Try to install the package from Test PyPI
          pip install --index-url https://test.pypi.org/simple/ \
                     --extra-index-url https://pypi.org/simple \
                     "${PACKAGE_NAME}==${VERSION#v}"

          if python -c "import ${PACKAGE_NAME}"; then
            echo "status=success" >> $GITHUB_OUTPUT
          else
            echo "status=failure" >> $GITHUB_OUTPUT
            exit 1
          fi
        env:
          VERSION: ${{ inputs.version }}

  product-review:
    needs: [qa-validation]
    environment:
      name: product-review
    runs-on: ubuntu-latest
    steps:
      - name: Product review checklist
        run: |
          echo "Product Review Results:"
          echo "- QA Status: ${{ needs.qa-validation.outputs.validation-status }}"
          echo "- Version: ${{ inputs.version }}"

  release-approval:
    needs: [product-review]
    environment:
      name: release-approval
    runs-on: ubuntu-latest
    steps:
      - name: Record approval
        run: |
          echo "RC Approval Record:"
          echo "- Version: ${{ inputs.version }}"
          echo "- Timestamp: $(date -u +"%Y-%m-%dT%H:%M:%SZ")"
          echo "- Approver: ${{ github.actor }}"