name: Reusable Code Quality

on:
  workflow_call:
    inputs:
      python-version:
        description: "Python version for checks"
        type: string
        default: "3.10"
      node-version:
        description: "Node.js version for checks"
        type: string
        default: "18.15.0"

jobs:
  pre-commit:
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - uses: ./.github/actions/code-quality/pre-commit
        with:
          python-version: ${{ inputs.python-version }}
          node-version: ${{ inputs.node-version }}

# .github/workflows/_reusable-security-scan.yaml
name: Reusable Security Scan

on:
  workflow_call:
    inputs:
      tools:
        description: "Security tools to run (comma-separated: bandit,clamav,semgrep,trivy)"
        type: string
        default: "bandit,semgrep"
      scan-scope:
        description: "Scan scope (all/changed)"
        type: string
        default: "changed"
      severity-level:
        description: "Minimum severity level (LOW/MEDIUM/HIGH)"
        type: string
        default: "LOW"
      fail-on-findings:
        description: "Fail workflow if issues found"
        type: boolean
        default: true
    outputs:
      has-findings:
        description: "Whether any security issues were found"
        value: ${{ jobs.summarize.outputs.has_findings }}

jobs:
  setup:
    runs-on: ubuntu-latest
    outputs:
      tools: ${{ steps.parse-tools.outputs.tools }}
    steps:
      - id: parse-tools
        run: |
          TOOLS="${{ inputs.tools }}"
          if [[ "$TOOLS" == "all" ]]; then
            TOOLS="bandit,clamav,semgrep,trivy"
          fi
          echo "tools=$TOOLS" >> $GITHUB_OUTPUT

  scan:
    needs: setup
    strategy:
      fail-fast: false
      matrix:
        tool: ${{ fromJson(format('[{0}]', needs.setup.outputs.tools)) }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/security/${{ matrix.tool }}
        with:
          scan-scope: ${{ inputs.scan-scope }}
          severity-level: ${{ inputs.severity-level }}
          fail-on-findings: ${{ inputs.fail-on-findings }}

  summarize:
    needs: scan
    runs-on: ubuntu-latest
    outputs:
      has_findings: ${{ steps.check-findings.outputs.has_findings }}
    steps:
      - id: check-findings
        run: |
          if [[ "${{ contains(needs.*.result, 'failure') }}" == "true" ]]; then
            echo "has_findings=true" >> $GITHUB_OUTPUT
          else
            echo "has_findings=false" >> $GITHUB_OUTPUT
          fi