# Release Workflow
#
# This workflow orchestrates the complete release process for both production and release candidate (RC) versions.
#
# Key Components:
# 1. Validation:
#    - Version format and compatibility checks
#    - Code quality verification
#    - Test suite execution
#    - Security scanning
#    - Package build verification
#
# 2. Release Candidate (RC) Process:
#    - Triggered for versions with '-rc' suffix
#    - Publishes to Test PyPI
#    - Performs RC-specific validations
#
# 3. Production Release Process:
#    - Triggered for versions without '-rc' suffix
#    - Publishes to Production PyPI
#    - Performs production-specific validations
#
# Trigger Methods:
# - Automatically on version tag push:
#   - Production versions: v*.*.* (e.g., v1.2.3)
#   - RC versions: v*.*.*-rc* (e.g., v1.2.3-rc1)
# - Manually via workflow dispatch:
#   - Requires version input
#   - Optional dry-run mode for testing
#
# Required Secrets:
# - CODECOV_TOKEN: For coverage reporting
# - TEST_PYPI_TOKEN: For RC deployments
# - PYPI_TOKEN: For production deployments
#
# Outputs:
# - Release status and validation results
# - Built artifacts and documentation

name: Release

on:
  push:
    tags:
      - "v*.*.*"
      - "v*.*.*-rc*"
  workflow_dispatch:
    inputs:
      version:
        description: "Version to release (e.g., v1.2.3 or v1.2.3-rc1)"
        required: true
        type: string
      dry_run:
        description: "Perform a dry run without creating a release"
        required: false
        type: boolean
        default: false

jobs:
  validation:
    uses: ./.github/workflows/_reusable-release-validation.yaml
    with:
      version: ${{ github.event_name == 'push' && github.ref_name || inputs.version }}
      python-version: "3.10"
      node-version: "18.15.0"
      verify-package: true
      dry-run: ${{ github.event.inputs.dry_run || false }}
      allow-prerelease: true
    secrets:
      codecov-token: ${{ secrets.CODECOV_TOKEN }}

  rc-release-process:
    needs: [validation]
    if: contains(needs.validation.outputs.version, '-rc')
    uses: ./.github/workflows/_reusable-rc-release-process.yaml
    with:
      version: ${{ needs.validation.outputs.version }}
      artifact-name: ${{ needs.validation.outputs.artifact-name }}
    secrets:
      test-pypi-token: ${{ secrets.TEST_PYPI_TOKEN }}

  production-release-process:
    needs: [validation]
    if: ${{ !contains(needs.validation.outputs.version, '-rc') }}
    uses: ./.github/workflows/_reusable-production-release-process.yaml
    with:
      version: ${{ needs.validation.outputs.version }}
      artifact-name: ${{ needs.validation.outputs.artifact-name }}
    secrets:
      pypi-token: ${{ secrets.PYPI_TOKEN }}

  status:
    needs: [validation, rc-release-process, production-release-process]
    if: always() && !inputs.dry_run
    uses: ./.github/workflows/_reusable-release-status.yaml
    with:
      version: ${{ needs.validation.outputs.version }}
      rc-status: ${{ needs.rc-release-process.result }}
      prod-status: ${{ needs.production-release-process.result }}
