name: Release

on:
  push:
    tags:
      - "v*.*.*"
  workflow_dispatch:
    inputs:
      version:
        description: "Version to release (e.g., v1.2.3 or v1.2.3-rc1)"
        required: true
        type: string
      dry_run:
        description: "Perform a dry run without creating a release"
        required: false
        type: boolean
        default: false

jobs:
  version:
    uses: ./.github/workflows/_reusable-version-check.yaml
    with:
      version: ${{ inputs.version }}
      allow-prerelease: true

  quality:
    needs: [version]
    uses: ./.github/workflows/_reusable-code-quality.yaml
    with:
      python-version: "3.10"
      node-version: "18.15.0"

  tests:
    needs: [version]
    uses: ./.github/workflows/_reusable-test-suite.yaml
    with:
      test-types: "unit,integration"
      unit-test-timeout: 10
      integration-test-timeout: 30
    secrets:
      codecov-token: ${{ secrets.CODECOV_TOKEN }}

  security:
    needs: [version]
    uses: ./.github/workflows/_reusable-security-scan.yaml
    with:
      tools: "bandit,semgrep,trivy"
      scan-scope: "all"
      severity-level: "LOW"
      fail-on-findings: true

  build:
    needs: [version, quality, tests, security]
    if: |
      !inputs.dry_run &&
      !failure() && !cancelled()
    uses: ./.github/workflows/_reusable-artifact-builder.yaml
    with:
      python-version: "3.10"
      verify-package: true

  # Stage 1: Technical Review (Required for both RC and final releases)
  technical-review:
    needs: [version, build]
    environment:
      name: technical-review
      url: ${{ steps.review-url.outputs.url }}
    runs-on: ubuntu-latest
    steps:
      - name: Generate review URL
        id: review-url
        run: |
          echo "url=$GITHUB_SERVER_URL/$GITHUB_REPOSITORY/actions/runs/$GITHUB_RUN_ID" >> $GITHUB_OUTPUT

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: ${{ needs.build.outputs.artifact-name }}
          path: dist

      - name: Show environment info
        run: |
          echo "Environment: ${{ vars.ENVIRONMENT }}"
          echo "Review Level: ${{ vars.REVIEW_LEVEL }}"

      - name: Technical review checklist
        run: |
          echo "Technical Review Checklist:"
          echo "- All tests passed: ${{ needs.tests.result == 'success' }}"
          echo "- Security checks passed: ${{ needs.security.result == 'success' }}"
          echo "- Code quality passed: ${{ needs.quality.result == 'success' }}"
          echo "- Build artifacts verified: ${{ needs.build.result == 'success' }}"

  # Stage 2: QA Validation (Only for RC releases)
  qa-validation:
    needs: [version, build, technical-review]
    if: contains(needs.version.outputs.version, '-rc')
    environment:
      name: qa-validation
      url: ${{ steps.qa-url.outputs.url }}
    runs-on: ubuntu-latest
    outputs:
      validation-status: ${{ steps.validate.outputs.status }}
    steps:
      - name: Show environment info
        run: |
          echo "Environment: ${{ vars.ENVIRONMENT }}"
          echo "QA Environment: ${{ vars.QA_ENVIRONMENT }}"

      - name: Set QA environment URL
        id: qa-url
        run: |
          echo "url=${{ vars.TEST_PYPI_URL }}/project/${GITHUB_REPOSITORY#*/}/${VERSION}" >> $GITHUB_OUTPUT
        env:
          VERSION: ${{ needs.version.outputs.version }}

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: ${{ needs.build.outputs.artifact-name }}
          path: dist

      - name: Deploy to Test PyPI
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.TEST_PYPI_TOKEN }}
          TWINE_REPOSITORY_URL: ${{ vars.TEST_PYPI_URL }}/legacy/
        run: |
          pip install --upgrade pip twine
          twine upload dist/*

      - name: Validate in QA
        id: validate
        run: |
          python -m venv test-env
          source test-env/bin/activate
          pip install --index-url ${{ vars.TEST_PYPI_URL }}/simple/ \
                     --extra-index-url https://pypi.org/simple/ \
                     "${GITHUB_REPOSITORY#*/}==${VERSION#v}"

          if python -c "import ${GITHUB_REPOSITORY#*/}; print(${GITHUB_REPOSITORY#*/}.__version__)"; then
            echo "status=success" >> $GITHUB_OUTPUT
          else
            echo "status=failure" >> $GITHUB_OUTPUT
            exit 1
          fi
        env:
          VERSION: ${{ needs.version.outputs.version }}

  # Stage 3: Product Review (Only for RC releases)
  product-review:
    needs: [version, qa-validation]
    if: contains(needs.version.outputs.version, '-rc')
    environment:
      name: product-review
      url: ${{ steps.product-url.outputs.url }}
    runs-on: ubuntu-latest
    steps:
      - name: Show environment info
        run: |
          echo "Environment: ${{ vars.ENVIRONMENT }}"
          echo "Review Type: ${{ vars.REVIEW_TYPE }}"

      - name: Generate review URL
        id: product-url
        run: |
          echo "url=${{ vars.TEST_PYPI_URL }}/project/${GITHUB_REPOSITORY#*/}/${VERSION}" >> $GITHUB_OUTPUT
        env:
          VERSION: ${{ needs.version.outputs.version }}

      - name: Display release information
        run: |
          echo "Product Review Information:"
          echo "Version: ${{ needs.version.outputs.version }}"
          echo "QA Validation: ${{ needs.qa-validation.outputs.validation-status }}"
          echo "Release Notes: $GITHUB_SERVER_URL/$GITHUB_REPOSITORY/releases/tag/${{ needs.version.outputs.version }}"

  # Stage 4: Release Approval (Only for RC releases)
  release-approval:
    needs: [version, product-review]
    if: contains(needs.version.outputs.version, '-rc')
    environment:
      name: release-approval
      url: ${{ steps.approval-url.outputs.url }}
    runs-on: ubuntu-latest
    steps:
      - name: Show environment info
        run: |
          echo "Environment: ${{ vars.ENVIRONMENT }}"
          echo "Release Gate: ${{ vars.RELEASE_GATE }}"

      - name: Generate approval URL
        id: approval-url
        run: |
          echo "url=$GITHUB_SERVER_URL/$GITHUB_REPOSITORY/actions/runs/$GITHUB_RUN_ID" >> $GITHUB_OUTPUT

      - name: Display release checklist
        run: |
          echo "Final Release Approval Required"
          echo "============================"
          echo "Version: ${{ needs.version.outputs.version }}"
          echo "Approval Chain:"
          echo "✓ Technical Review: Approved"
          echo "✓ QA Validation: Passed"
          echo "✓ Product Review: Approved"

  # Final Stage: Production Release
  prepare-release:
    needs: [version, build, release-approval]
    if: |
      !contains(needs.version.outputs.version, '-rc') ||
      (contains(needs.version.outputs.version, '-rc') &&
       needs.release-approval.result == 'success')
    runs-on: ubuntu-latest
    environment:
      name: production
      url: ${{ steps.prod-url.outputs.url }}
    steps:
      - name: Show environment info
        run: |
          echo "Environment: ${{ vars.ENVIRONMENT }}"
          echo "Deployment Target: ${{ vars.DEPLOYMENT_TARGET }}"

      - name: Set version
        id: set-version
        run: |
          if [[ "${{ needs.version.outputs.version }}" =~ -rc ]]; then
            FINAL_VERSION="${{ needs.version.outputs.version }%-rc*}"
          else
            FINAL_VERSION="${{ needs.version.outputs.version }}"
          fi
          echo "final_version=${FINAL_VERSION}" >> $GITHUB_OUTPUT

      - name: Generate production URL
        id: prod-url
        run: |
          echo "url=${{ vars.PYPI_URL }}/project/${GITHUB_REPOSITORY#*/}/${{ steps.set-version.outputs.final_version }}" >> $GITHUB_OUTPUT

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: ${{ needs.build.outputs.artifact-name }}
          path: dist

      - name: Upload for release
        uses: actions/upload-artifact@v4
        with:
          name: production-release-artifacts
          path: dist/
          retention-days: 1

  # Actual Release Publishing
  publish-release:
    needs: [version, prepare-release, release-approval]
    if: |
      !failure() && !cancelled() &&
      (!contains(needs.version.outputs.version, '-rc') ||
       (contains(needs.version.outputs.version, '-rc') && needs.release-approval.result == 'success'))
    uses: ./.github/workflows/_reusable-release-publisher.yaml
    with:
      version: ${{ needs.version.outputs.version }}
      artifact-name: production-release-artifacts
      is-prerelease: contains(needs.version.outputs.version, '-rc')
    secrets:
      pypi-token: ${{ secrets.PYPI_TOKEN }}
      test-pypi-token: ${{ secrets.TEST_PYPI_TOKEN }}

  # Final Status Check
  status:
    needs:
      - version
      - technical-review
      - qa-validation
      - product-review
      - release-approval
      - prepare-release
      - publish-release
    if: |
      always() &&
      !inputs.dry_run
    runs-on: ubuntu-latest
    steps:
      - name: Check workflow status
        run: |
          if [[ "${{ contains(needs.*.result, 'failure') }}" == "true" ]]; then
            echo "::error::Release workflow failed"
            exit 1
          fi

          if [[ "${{ needs.version.outputs.version }}" =~ -rc ]]; then
            echo "Release candidate workflow completed successfully"
            echo "Version: ${{ needs.version.outputs.version }}"
            echo "All approvals obtained and published to Test PyPI"
          else
            echo "Production release workflow completed successfully"
            echo "Version: ${{ needs.version.outputs.version }}"
            echo "Published to PyPI"
          fi