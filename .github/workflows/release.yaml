# release.yaml
name: Release

on:
  push:
    tags:
      - "v*.*.*"
  workflow_dispatch:
    inputs:
      version:
        description: "Version to release (e.g., v1.2.3)"
        required: true
        type: string
      dry_run:
        description: "Perform a dry run without creating a release"
        required: false
        type: boolean
        default: false

jobs:
  version:
    uses: ./.github/workflows/_reusable-version-check.yaml
    with:
      version: ${{ inputs.version }}
      allow-prerelease: true

  quality:
    needs: [version]
    uses: ./.github/workflows/_reusable-code-quality.yaml
    with:
      python-version: "3.10"
      node-version: "18.15.0"

  tests:
    needs: [version]
    uses: ./.github/workflows/_reusable-test-suite.yaml
    with:
      test-types: "unit,integration"
      max-test-time: 30
    secrets:
      codecov-token: ${{ secrets.CODECOV_TOKEN }}

  security:
    needs: [version]
    uses: ./.github/workflows/_reusable-security-scan.yaml
    with:
      tools: "bandit,semgrep,trivy"
      scan-scope: "all"
      severity-level: "LOW"

  build:
    needs: [version, quality, tests, security]
    if: |
      !inputs.dry_run &&
      !failure() && !cancelled()
    uses: ./.github/workflows/_reusable-artifact-builder.yaml
    with:
      python-version: "3.10"
      verify-package: true

  # Stage 1: Technical Review
  technical-review:
    needs: [version, build]
    environment:
      name: technical-review
      url: ${{ steps.review-url.outputs.url }}
    runs-on: ubuntu-latest
    steps:
      - name: Generate review URL
        id: review-url
        run: |
          echo "url=$GITHUB_SERVER_URL/$GITHUB_REPOSITORY/actions/runs/$GITHUB_RUN_ID" >> $GITHUB_OUTPUT

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: ${{ needs.build.outputs.artifact-name }}
          path: dist

      - name: Technical review checklist
        run: |
          echo "Technical Review Checklist:"
          echo "- All tests passed: ${{ needs.tests.result == 'success' }}"
          echo "- Security checks passed: ${{ needs.security.result == 'success' }}"
          echo "- Code quality passed: ${{ needs.quality.result == 'success' }}"
          echo "- Build artifacts verified: ${{ needs.build.result == 'success' }}"

  # Stage 2: QA Validation
  qa-validation:
    needs: [version, build, technical-review]
    environment:
      name: qa-validation
      url: ${{ steps.qa-url.outputs.url }}
    runs-on: ubuntu-latest
    outputs:
      validation-status: ${{ steps.validate.outputs.status }}
    steps:
      - name: Set QA environment URL
        id: qa-url
        run: |
          echo "url=https://test.pypi.org/project/${GITHUB_REPOSITORY#*/}/${VERSION}" >> $GITHUB_OUTPUT
        env:
          VERSION: ${{ needs.version.outputs.version }}

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: ${{ needs.build.outputs.artifact-name }}
          path: dist

      - name: Deploy to Test PyPI
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.TEST_PYPI_TOKEN }}
          TWINE_REPOSITORY_URL: https://test.pypi.org/legacy/
        run: |
          pip install --upgrade pip twine
          twine upload dist/*

      - name: Validate in QA
        id: validate
        run: |
          python -m venv test-env
          source test-env/bin/activate
          pip install --index-url https://test.pypi.org/simple/ \
                     --extra-index-url https://pypi.org/simple/ \
                     "${GITHUB_REPOSITORY#*/}==${VERSION#v}"

          # Add QA validation tests here
          if python -c "import ${GITHUB_REPOSITORY#*/}; print(${GITHUB_REPOSITORY#*/}.__version__)"; then
            echo "status=success" >> $GITHUB_OUTPUT
          else
            echo "status=failure" >> $GITHUB_OUTPUT
            exit 1
          fi
        env:
          VERSION: ${{ needs.version.outputs.version }}

  # Stage 3: Product Owner Review
  product-review:
    needs: [version, qa-validation]
    if: needs.qa-validation.outputs.validation-status == 'success'
    environment:
      name: product-review
      url: ${{ steps.product-url.outputs.url }}
    runs-on: ubuntu-latest
    steps:
      - name: Generate review URL
        id: product-url
        run: |
          echo "url=https://test.pypi.org/project/${GITHUB_REPOSITORY#*/}/${VERSION}" >> $GITHUB_OUTPUT
        env:
          VERSION: ${{ needs.version.outputs.version }}

      - name: Display release information
        run: |
          echo "Product Review Information:"
          echo "Version: ${{ needs.version.outputs.version }}"
          echo "QA Validation: ${{ needs.qa-validation.outputs.validation-status }}"
          echo "Release Notes: $GITHUB_SERVER_URL/$GITHUB_REPOSITORY/releases/tag/${{ needs.version.outputs.version }}"

  # Stage 4: Final Release Approval
  release-approval:
    needs: [version, product-review]
    environment:
      name: release-approval
      url: ${{ steps.approval-url.outputs.url }}
    runs-on: ubuntu-latest
    steps:
      - name: Generate approval URL
        id: approval-url
        run: |
          echo "url=$GITHUB_SERVER_URL/$GITHUB_REPOSITORY/actions/runs/$GITHUB_RUN_ID" >> $GITHUB_OUTPUT

      - name: Display release checklist
        run: |
          echo "Release Approval Checklist:"
          echo "- Technical Review: Approved"
          echo "- QA Validation: Passed"
          echo "- Product Review: Approved"
          echo "Version: ${{ needs.version.outputs.version }}"

  # Final Stage: Production Release
  prepare-release:
    needs: [version, build, release-approval]
    runs-on: ubuntu-latest
    environment:
      name: production
      url: ${{ steps.prod-url.outputs.url }}
    steps:
      - name: Generate production URL
        id: prod-url
        run: |
          echo "url=https://pypi.org/project/${GITHUB_REPOSITORY#*/}/${{ needs.version.outputs.version }}" >> $GITHUB_OUTPUT

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: ${{ needs.build.outputs.artifact-name }}
          path: dist

      - name: Upload for release
        uses: actions/upload-artifact@v4
        with:
          name: production-release-artifacts
          path: dist/
          retention-days: 1

  # Actual Release Publishing
  publish-release:
    needs: [version, prepare-release]
    uses: ./.github/workflows/_reusable-release-publisher.yaml
    with:
      version: ${{ needs.version.outputs.version }}
      artifact-name: production-release-artifacts
      is-prerelease: false
    secrets:
      pypi-token: ${{ secrets.PYPI_TOKEN }}
      test-pypi-token: ${{ secrets.TEST_PYPI_TOKEN }}

  # Final Status Check
  status:
    needs:
      - version
      - technical-review
      - qa-validation
      - product-review
      - release-approval
      - prepare-release
      - publish-release
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Check workflow status
        run: |
          if [[ "${{ contains(needs.*.result, 'failure') }}" == "true" ]]; then
            echo "::error::Release workflow failed"
            exit 1
          fi

          echo "Release workflow completed successfully"
          echo "Version: ${{ needs.version.outputs.version }}"
          echo "All approvals obtained and release published to PyPI"
