# Release Workflow
#
# This workflow handles the release process for the package, including:
# - Version validation (using _reusable-version-check.yaml)
# - Code quality checks (using _reusable-code-quality.yaml)
# - Test suite execution (using _reusable-test-suite.yaml)
# - Security scanning (using _reusable-security-scan.yaml)
#
# Triggers:
# - On push of version tags (v*.*.* or v*.*.*-rc*)
# - Manual workflow dispatch with version input
#
# Supports:
# - Production releases (vX.Y.Z)
# - Pre-releases (vX.Y.Z-rcN)
# - Dry run mode for testing

name: Release

on:
  push:
    tags:
      - "v*.*.*"
      - "v*.*.*-rc*"
  workflow_dispatch:
    inputs:
      version:
        description: "Version to release (e.g., v1.2.3 or v1.2.3-rc1)"
        required: true
        type: string
      dry_run:
        description: "Perform a dry run without creating a release"
        required: false
        type: boolean
        default: false

jobs:
  version:
    uses: ./.github/workflows/_reusable-version-check.yaml
    with:
      version: ${{ inputs.version }}
      allow-prerelease: true

  quality:
    needs: [version]
    uses: ./.github/workflows/_reusable-code-quality.yaml
    with:
      python-version: "3.10"
      node-version: "18.15.0"

  tests:
    needs: [version]
    uses: ./.github/workflows/_reusable-test-suite.yaml
    with:
      test-types: "unit,integration"
      unit-test-timeout: 10
      integration-test-timeout: 30
    secrets:
      codecov-token: ${{ secrets.CODECOV_TOKEN }}

  security:
    needs: [version]
    uses: ./.github/workflows/_reusable-security-scan.yaml
    with:
      tools: "bandit,semgrep,trivy,clamav"
      scan-scope: "all"
      severity-level: "LOW"
      fail-on-findings: true

  build:
    needs: [version, quality, tests, security]
    if: |
      !inputs.dry_run &&
      !failure() && !cancelled()
    uses: ./.github/workflows/_reusable-artifact-builder.yaml
    with:
      python-version: "3.10"
      verify-package: true

  # Stage 1: Technical Review (RC only)
  technical-review:
    needs: [version, build]
    if: contains(needs.version.outputs.version, '-rc')
    environment:
      name: technical-review
      url: ${{ steps.review-url.outputs.url }}
    runs-on: ubuntu-latest
    steps:
      - name: Generate review URL
        id: review-url
        run: |
          echo "url=$GITHUB_SERVER_URL/$GITHUB_REPOSITORY/actions/runs/$GITHUB_RUN_ID" >> $GITHUB_OUTPUT

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: ${{ needs.build.outputs.artifact-name }}
          path: dist

      - name: Show environment info
        run: |
          echo "Environment: ${{ vars.ENVIRONMENT }}"
          echo "Review Level: ${{ vars.REVIEW_LEVEL }}"

      - name: Technical review checklist
        run: |
          echo "Technical Review Checklist:"
          echo "- All tests passed: ${{ needs.tests.result == 'success' }}"
          echo "- Security checks passed: ${{ needs.security.result == 'success' }}"
          echo "- Code quality passed: ${{ needs.quality.result == 'success' }}"
          echo "- Build artifacts verified: ${{ needs.build.result == 'success' }}"

  # Stage 2: QA Validation (RC only)
  qa-validation:
    needs: [version, build, technical-review]
    if: contains(needs.version.outputs.version, '-rc')
    environment:
      name: qa-validation
      url: ${{ steps.qa-url.outputs.url }}
    runs-on: ubuntu-latest
    outputs:
      validation-status: ${{ steps.validate.outputs.status }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Get package name
        id: get-package-name
        run: |
          # Install toml parser
          pip install tomli

          # Extract package name from pyproject.toml
          PACKAGE_NAME=$(python -c "import tomli; print(tomli.load(open('pyproject.toml', 'rb'))['project']['name'])")
          echo "Package name: $PACKAGE_NAME"
          echo "name=$PACKAGE_NAME" >> $GITHUB_OUTPUT

          # Get the import name (directory under src)
          IMPORT_NAME=$(ls src/)
          echo "Import name: $IMPORT_NAME"
          echo "import_name=$IMPORT_NAME" >> $GITHUB_OUTPUT

      - name: Show environment info
        run: |
          echo "Environment: ${{ vars.ENVIRONMENT }}"

      - name: Generate QA URL
        id: qa-url
        run: |
          echo "url=$GITHUB_SERVER_URL/$GITHUB_REPOSITORY/actions/runs/$GITHUB_RUN_ID" >> $GITHUB_OUTPUT

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: ${{ needs.build.outputs.artifact-name }}
          path: dist

      - name: Deploy to Test PyPI
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.TEST_PYPI_TOKEN }}
          TWINE_REPOSITORY_URL: ${{ vars.TEST_PYPI_URL }}/legacy/
        run: |
          pip install --upgrade pip twine
          twine upload dist/*

      - name: Validate in QA
        id: validate
        run: |
          python -m venv test-env
          source test-env/bin/activate

          # Use extracted package name
          pip install --index-url ${{ vars.TEST_PYPI_URL }}/simple/ \
                     --extra-index-url https://pypi.org/simple/ \
                     "${{ steps.get-package-name.outputs.name }}==${VERSION#v}"

          # Use extracted import name
          if python -c "import ${{ steps.get-package-name.outputs.import_name }}; print(${{ steps.get-package-name.outputs.import_name }}.__version__)"; then
            echo "status=success" >> $GITHUB_OUTPUT
          else
            echo "status=failure" >> $GITHUB_OUTPUT
            exit 1
          fi
        env:
          VERSION: ${{ needs.version.outputs.version }}

  # Stage 3: Product Review (RC only)
  product-review:
    needs: [version, qa-validation]
    if: contains(needs.version.outputs.version, '-rc')
    environment:
      name: product-review
      url: ${{ steps.product-url.outputs.url }}
    runs-on: ubuntu-latest
    steps:
      - name: Show environment info
        run: |
          echo "Environment: ${{ vars.ENVIRONMENT }}"
          echo "Review Type: ${{ vars.REVIEW_TYPE }}"

      - name: Generate review URL
        id: product-url
        run: |
          echo "url=${{ vars.TEST_PYPI_URL }}/project/${GITHUB_REPOSITORY#*/}/${VERSION}" >> $GITHUB_OUTPUT
        env:
          VERSION: ${{ needs.version.outputs.version }}

      - name: Display release information
        run: |
          echo "Product Review Information:"
          echo "Version: ${{ needs.version.outputs.version }}"
          echo "QA Validation: ${{ needs.qa-validation.outputs.validation-status }}"
          echo "Release Notes: $GITHUB_SERVER_URL/$GITHUB_REPOSITORY/releases/tag/${{ needs.version.outputs.version }}"

  # Stage 4: Release Approval (RC only)
  release-approval:
    needs: [version, product-review]
    if: contains(needs.version.outputs.version, '-rc')
    environment:
      name: release-approval
      url: ${{ steps.approval-url.outputs.url }}
    outputs:
      approved-version: ${{ steps.get-approved-version.outputs.version }}
    runs-on: ubuntu-latest
    steps:
      - name: Show environment info
        run: |
          echo "Environment: ${{ vars.ENVIRONMENT }}"
          echo "Release Gate: ${{ vars.RELEASE_GATE }}"

      - name: Generate approval URL
        id: approval-url
        run: |
          echo "url=$GITHUB_SERVER_URL/$GITHUB_REPOSITORY/actions/runs/$GITHUB_RUN_ID" >> $GITHUB_OUTPUT

      - name: Get approved version
        id: get-approved-version
        run: |
          FINAL_VERSION=$(echo "${{ needs.version.outputs.version }}" | sed 's/-rc.*//')
          echo "version=${FINAL_VERSION}" >> $GITHUB_OUTPUT

      - name: Record approved RC
        if: success()
        run: |
          VERSION="${{ needs.version.outputs.version }}"
          FINAL_VERSION="${VERSION%-rc*}"

          # Store approval in GitHub environment
          gh api -X PUT /repos/${{ github.repository }}/environments/production/approved-rc \
            -f version="$VERSION" \
            -f approved_at="$(date -u +"%Y-%m-%dT%H:%M:%SZ")" \
            -f approval_workflow="${{ github.run_id }}"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Display release checklist
        run: |
          echo "Final Release Approval Required"
          echo "============================"
          echo "RC Version: ${{ needs.version.outputs.version }}"
          echo "Final Version: ${{ steps.get-approved-version.outputs.version }}"
          echo "Approval Chain:"
          echo "✓ Technical Review: Approved"
          echo "✓ QA Validation: Passed"
          echo "✓ Product Review: Approved"

  # Validate release readiness for production release
  validate-release-readiness:
    runs-on: ubuntu-latest
    needs: [version]
    if: "!contains(needs.version.outputs.version, '-rc')"
    steps:
      - name: Check for approved RC
        id: check-rc
        run: |
          VERSION="${{ needs.version.outputs.version }}"

          # Get the most recent RC for this version
          RC_TAG=$(git tag -l "v${VERSION%-*}-rc*" --sort=-v:refname | head -n1)

          if [ -z "$RC_TAG" ]; then
            echo "::error::No release candidate found for version $VERSION"
            echo "Please create and approve an RC first"
            exit 1
          fi

          # Check if RC was approved by verifying workflow status
          WORKFLOW_ID=$(gh api repos/${{ github.repository }}/actions/workflows/release.yaml -q '.id')
          RC_RUN=$(gh run list --workflow $WORKFLOW_ID --branch $RC_TAG --json conclusion,databaseId -q '.[] | select(.conclusion=="success") | .databaseId' | head -n1)

          if [ -z "$RC_RUN" ]; then
            echo "::error::No successful release workflow found for RC $RC_TAG"
            exit 1
          fi

          # Verify all required approvals were obtained
          APPROVALS=$(gh api repos/${{ github.repository }}/actions/runs/$RC_RUN/jobs -q '.jobs[] | select(.name | contains("approval")) | .conclusion')
          if [[ ! "$APPROVALS" =~ "success" ]]; then
            echo "::error::RC $RC_TAG has not completed the approval process"
            exit 1
          fi

          echo "rc_tag=$RC_TAG" >> $GITHUB_OUTPUT
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Production Release Stage
  prepare-release:
    needs: [version, build, validate-release-readiness]  # Add validation dependency
    if: |
      !contains(needs.version.outputs.version, '-rc') &&
      !failure() && !cancelled()
    runs-on: ubuntu-latest
    environment:
      name: production
      url: ${{ steps.prod-url.outputs.url }}
    steps:
      - name: Show environment info
        run: |
          echo "Environment: ${{ vars.ENVIRONMENT }}"
          echo "Deployment Target: ${{ vars.DEPLOYMENT_TARGET }}"

      - name: Generate production URL
        id: prod-url
        run: |
          echo "url=${{ vars.PYPI_URL }}/project/${GITHUB_REPOSITORY#*/}/${{ needs.version.outputs.version }}" >> $GITHUB_OUTPUT

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: ${{ needs.build.outputs.artifact-name }}
          path: dist

      - name: Upload for release
        uses: actions/upload-artifact@v4
        with:
          name: production-release-artifacts
          path: dist/
          retention-days: 1

  # Final Release Publishing
  publish-release:
    needs: [version, prepare-release]
    if: |
      !contains(needs.version.outputs.version, '-rc') &&
      !failure() && !cancelled()
    uses: ./.github/workflows/_reusable-release-publisher.yaml
    with:
      version: ${{ needs.version.outputs.version }}
      artifact-name: production-release-artifacts
      is-prerelease: false
    secrets:
      pypi-token: ${{ secrets.PYPI_TOKEN }}

  # Final Status Check
  status:
    needs:
      - version
      - technical-review
      - qa-validation
      - product-review
      - release-approval
      - prepare-release
      - publish-release
    if: |
      always() &&
      !inputs.dry_run
    runs-on: ubuntu-latest
    steps:
      - name: Check workflow status
        run: |
          if [[ "${{ contains(needs.*.result, 'failure') }}" == "true" ]]; then
            echo "::error::Release workflow failed"
            exit 1
          fi

          if [[ "${{ needs.version.outputs.version }}" =~ -rc ]]; then
            echo "Release candidate workflow completed successfully"
            echo "Version: ${{ needs.version.outputs.version }}"
            echo "All approvals obtained and published to Test PyPI"
          else
            echo "Production release workflow completed successfully"
            echo "Version: ${{ needs.version.outputs.version }}"
            echo "Published to PyPI"
          fi
