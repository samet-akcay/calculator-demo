# Semgrep Security Scanner Action
#
# This composite action runs Semgrep for advanced static analysis security testing (SAST).
# It provides comprehensive code analysis with support for custom rules and multiple
# programming languages.
#
# Features:
# - Multi-language security scanning
# - Built-in OWASP Top 10 rule sets
# - Custom rule support
# - Incremental scanning capability
# - Performance-optimized execution
# - Configurable severity levels
# - SARIF report generation
#
# Scan Process:
# 1. Sets up Python environment
# 2. Installs and configures Semgrep
# 3. Determines scan targets based on scope
# 4. Applies configured rule sets
# 5. Executes analysis with timeout protection
# 6. Generates detailed findings report
#
# Performance Features:
# - Intelligent file filtering
# - Parallel rule execution
# - Incremental analysis support
# - Memory usage optimization
# - Configurable timeouts
#
# Example Usage:
#   - uses: ./.github/actions/security/semgrep
#     with:
#       scan_scope: "changed"
#       config: "p/owasp-top-ten"
#       severity: "WARNING"
#       output_format: "sarif"
#
# Note: For optimal results, consider using custom rule sets and
# configuring appropriate severity thresholds for your project.
# The SARIF output format enables integration with GitHub Security tab.

name: "Semgrep SAST Scan"
description: "Runs Semgrep security scanner with configurable options"

inputs:
  scan_scope:
    description: "Scope of files to scan (all/changed)"
    required: false
    default: "changed"
  paths:
    description: "Paths to scan when using all scope"
    required: false
    default: "."
  config:
    description: "Semgrep rules or config to use"
    required: false
    default: "p/default"
  severity:
    description: "Minimum severity level to report (ERROR/WARNING/INFO)"
    required: false
    default: "WARNING"
  timeout:
    description: "Maximum time to run semgrep in seconds"
    required: false
    default: "300"
  output_format:
    description: "Format for scan results (text/json/sarif)"
    required: false
    default: "sarif"
  fail_on_findings:
    description: "Whether to fail the action if issues are found"
    required: false
    default: "true"

outputs:
  scan_result:
    description: "Exit code of the Semgrep scan"
    value: ${{ steps.run-semgrep.outputs.exit_code }}
  report_path:
    description: "Path to the generated report file"
    value: ${{ steps.run-semgrep.outputs.report_path }}

runs:
  using: composite
  steps:
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.10"

    - name: Install Semgrep
      shell: bash
      run: |
        python -m pip install --upgrade pip
        pip install semgrep

    - name: Get changed files
      if: inputs.scan_scope == 'changed'
      id: changed-files
      uses: tj-actions/changed-files@v41
      with:
        files: |
          **/*.*

    - name: Run Semgrep scan
      id: run-semgrep
      shell: bash
      run: |
        REPORT_FILE="semgrep-results.${{ inputs.output_format }}"

        if [[ "${{ inputs.scan_scope }}" == "changed" && -n "${{ steps.changed-files.outputs.all_changed_files }}" ]]; then
          echo "Running Semgrep on changed files"
          FILES="${{ steps.changed-files.outputs.all_changed_files }}"
        else
          echo "Running Semgrep on all files in ${{ inputs.paths }}"
          FILES="${{ inputs.paths }}"
        fi

        semgrep \
          --config ${{ inputs.config }} \
          --severity ${{ inputs.severity }} \
          --timeout ${{ inputs.timeout }} \
          --${{ inputs.output_format }} \
          -o "${REPORT_FILE}" \
          ${FILES} || echo "exit_code=$?" >> $GITHUB_OUTPUT

        echo "report_path=${REPORT_FILE}" >> $GITHUB_OUTPUT

        if [[ "${{ inputs.fail_on_findings }}" == "true" && -n "$exit_code" && "$exit_code" != "0" ]]; then
          exit $exit_code
        fi
